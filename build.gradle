plugins {
    id 'java'
    id 'jacoco'
    id 'me.champeau.jmh' version '0.7.1'
}

java {
    sourceCompatibility = 19
    targetCompatibility = 19
}

group 'org.example'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
    jmh 'org.openjdk.jmh:jmh-core:1.36'
    jmh 'org.openjdk.jmh:jmh-generator-annprocess:1.36'
}

tasks.withType(JavaCompile) {
    options.compilerArgs += ["--enable-preview"]
}

tasks.withType(Test) {
    jvmArgs += ["--enable-preview"]
}

tasks.withType(JavaExec) {
    jvmArgs += ['--enable-preview']
}

test {
    if (!System.getenv().containsKey("DEBUG")) {
        environment "DEBUG", "true"
    }
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    jacoco {
    }
}



jmh {
    forceGC = true

    humanOutputFile = project.file("${project.buildDir}/reports/jmh/human.txt") // human-readable output file
    resultsFile = project.file("${project.buildDir}/reports/jmh/results.json") // results file
    resultFormat = 'JSON' // Result format type (one of CSV, JSON, NONE, SCSV, TEXT)
    jvmArgs = [
            '--enable-preview',
            '-XX:+UnlockExperimentalVMOptions',
            '-XX:+UnlockDiagnosticVMOptions',

            '-Xms10g',
            '-Xmx10g',

            '-XX:+UseSerialGC',
            '-XX:+AlwaysPreTouch',

//            '-XX:MaxRecursiveInlineLevel=20',
//            '-XX:InlineSmallCode=1g',
//            '-XX:InlineSmallCode=1g',
//            '-XX:CompileCommand="inline,com.huawei.simplelib.SChannel::*"',
//            '-XX:CompileCommand="inline,com.huawei.simplelib.SScheduler::*"',
//            '-XX:CompileCommand="inline,com.huawei.simplelib.SCoRange::cont"',
//            '-XX:CompileCommand="inline,com.huawei.simplelib.SCoSum::cont"',

    ]

    //  profilers = ['jfr']

    jmhVersion = '1.36' // Specifies JMH version
    duplicateClassesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.withType(me.champeau.jmh.JmhBytecodeGeneratorTask).configureEach {
    jvmArgs.set(["--enable-preview"])
}